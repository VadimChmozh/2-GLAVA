//Function Expression
/*
Функция в JavaScript – это не магическая языковая структура, а особого типа значение.
Синтаксис, который мы использовали до этого, называется Function Declaration (Объявление Функции)
function sayHi() {
  alert( "Привет" );
}
Существует ещё один синтаксис создания функций, который называется Function Expression (Функциональное Выражение).
Данный синтаксис позволяет нам создавать новую функцию в середине любого выражения.
Поскольку создание функции происходит в контексте выражения присваивания (с правой стороны от =), это Function Expression.
Для Function Expression допускается  отсутствие function.
Функция – это значение
Давайте повторим: независимо от того, как создаётся функция – она является значением.
 В обоих приведённых выше примерах функция хранится в переменной

 Function Expression в сравнении с Function Declaration
Давайте разберём ключевые отличия Function Declaration от Function Expression.
Во-первых, синтаксис: как отличить их друг от друга в коде.
Function Declaration: функция объявляется отдельной конструкцией «function…» в основном потоке кода.
Function Expression: функция, созданная внутри другого выражения или синтаксической конструкции.

Функции – это значения. Они могут быть присвоены, скопированы или объявлены в любом месте кода.
Если функция объявлена как отдельная инструкция в основном потоке кода, то это “Function Declaration”.
Если функция была создана как часть выражения, то это “Function Expression”.
Function Declaration обрабатываются перед выполнением блока кода. Они видны во всём блоке.
Функции, объявленные при помощи Function Expression, создаются только когда поток выполнения достигает их.
В большинстве случаев, когда нам нужно объявить функцию, Function Declaration предпочтительнее, т.к функция будет видна до своего объявления в коде. 
Это даёт нам больше гибкости в организации кода, и, как правило, делает его более читабельным.
*/
